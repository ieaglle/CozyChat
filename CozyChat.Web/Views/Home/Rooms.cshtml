@using Microsoft.AspNet.Identity
@{
    ViewBag.Title = "Rooms";
}

<h2>Rooms</h2>

<div class="row">
    
    <div class="col-md-3">
        <div class="list-group" data-bind="foreach: chatRooms">
            <a href="#" data-bind="text: Name, css: $root.roomClassName(Id), click: $root.selectRoom"></a>
        </div>
    </div>
    <div class="col-md-7" data-bind="visible: selectedRoom() != null">
        <div id="msgs" style="height: 400px; overflow-y: auto;">
            
            <table class="table table-condensed">
                <tbody data-bind="foreach: currentRoomMessages">
                    <tr>
                        <td><span data-bind="text: moment(Sent).format('D/MM/YYYY HH:mm')"></span></td>
                        <td><span data-bind="text: Sender"></span></td>
                        <td><span data-bind="text: Content"></span></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <form class="form-inline">
            <input type="text" class="form-control" 
                   placeholder="Enter your message" 
                   data-bind="value: newMessage" />

            <button class="btn btn-default" 
                    data-bind="click: addNewMessage">Send</button>
        </form>
    </div>
    <div class="col-md-2" data-bind="visible: selectedRoom() != null">
        Online users:
        <ul data-bind="foreach: currentRoomUsers">
            <li><span data-bind="text: Name"></span></li>
        </ul>
    </div>
</div>

<script type="text/javascript">

    $(document).ready(function() {

        function RoomsViewModel() {
            var self = this;

            self.chatRooms = ko.observableArray();
            self.currentRoomUsers = ko.observableArray();
            self.currentRoomMessages = ko.observableArray();
            self.selectedRoom = ko.observable();

            self.newMessage = ko.observable();

            self.roomClassName = function(id) {
                if (self.selectedRoom() && self.selectedRoom().Id == id)
                    return 'list-group-item active';
                return 'list-group-item';
            };

            self.activate = function() {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetSubscribedRooms")',
                     success: function(content) {
                         vm.chatRooms(content);
                     }
                 });
             };

             self.selectRoom = function(room) {

                 $.ajax({
                     type: 'GET',
                     url: '@Url.Action("GetMessagesForRoom")',
                     data: {userId: '@User.Identity.GetUserId()', roomId: room.Id},
                     success: function (content) {
                         self.currentRoomMessages(content);

                         if (!self.selectedRoom()) {
                             self.selectedRoom(room);
                             proxy.server.join(self.selectedRoom());
                         }

                         if (self.selectedRoom() && self.selectedRoom().Id != room.Id) {
                             proxy.server.leave(self.selectedRoom());
                             self.selectedRoom(room);
                             proxy.server.join(self.selectedRoom());
                         };

                         var elem = $('#msgs');
                         //elem.stop().animate({ scrollTop: elem[0].scrollHeight });
                         elem[0].scrollTop = elem[0].scrollHeight;
                     }
                 });
             };

             self.addNewMessage = function () {
                 proxy.server.sendToGroup(self.selectedRoom(), self.newMessage());
                 self.newMessage(null);
             };
        }

         var vm = new RoomsViewModel();
         ko.applyBindings(vm);
         vm.activate();

         var proxy = $.connection.cozyChatHub;
         $.connection.hub.start();
         proxy.client.userJoined = function (users) {
             vm.currentRoomUsers(users);
         };
         proxy.client.userLeft = function (users) {
             vm.currentRoomUsers(users);
         };
        $(window).on('beforeunload', function () {
            proxy.server.leave(vm.selectedRoom());
        });
        proxy.client.messageSent = function (message) {
            var elem = $('#msgs');
            var isDown = elem[0].scrollTop == (elem[0].scrollHeight-elem[0].offsetHeight);
            vm.currentRoomMessages.push(message);
            if (isDown)
                elem.stop().animate({ scrollTop: elem[0].scrollHeight });
        };

    });
 </script>

